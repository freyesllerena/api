<?php

namespace ApiBundle\Repository;

use ApiBundle\Controller\apiV1\DocumentController;
use ApiBundle\Entity\IfpIndexfichePaperless;
use ApiBundle\Entity\PdhProfilDefHabi;
use ApiBundle\Entity\UsrUsers;
use ApiBundle\Enum\EnumLabelModeHabilitationType;
use ApiBundle\PopulationFilter\DoctrineExpressionBuilder;
use ApiBundle\PopulationFilter\SimpleXmlParser;
use Doctrine\ORM\QueryBuilder;

/**
 * IfpIndexfichePaperlessRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IfpIndexfichePaperlessRepository extends BaseRepository
{

    /**
     * Génère la requête des filtres par population pour un utilisateur donné
     *
     * @param UsrUsers $user L'utilisateur donné
     *
     * @return QueryBuilder  La requête générée
     * @throws \Exception
     */
    public function createUserHabilitationsQuery(UsrUsers $user)
    {
        $modesHabilitations = array();
        $expressions = array();
        $parameters = array();

        $pdhs = $this->getEntityManager()
            ->getRepository('ApiBundle:PdhProfilDefHabi')
            ->findByUser($user);
        /* @var $pdhs PdhProfilDefHabi[] */
        foreach ($pdhs as $n => $pdh) {
            $modesHabilitations[] = $pdh->getPdhMode();
            list($expression, $params) = $this->createHabilitationExpression($pdh, 'habi_'.$n);
            if ($expression) {
                $expressions[] = $expression;
                $parameters += $params;
            }
        }

        $modesHabilitations = array_unique($modesHabilitations);
        if ($modesHabilitations == array(EnumLabelModeHabilitationType::ARCHIVE_MODE)) {
            $join = '';
        } elseif ($modesHabilitations == array(EnumLabelModeHabilitationType::REFERENCE_MODE)) {
            $join = 'innerJoin';
        } else {
            $join = 'leftJoin';
        }

        $queryBuilder = $this->createQueryBuilder('ifp');
        $queryBuilder->select('ifp.ifpId');
        if ($join) {
            $queryBuilder->$join(
                'ApiBundle:IinIdxIndiv',
                'iin',
                'WITH',
                'ifp.ifpNumMatricule = iin.iinNumMatricule AND ifp.ifpCodeClient = iin.iinCodeClient'
            );
        }
        if ($expressions) {
            $queryBuilder->andWhere(implode(' AND ', $expressions));
            foreach ($parameters as $name => $value) {
                $queryBuilder->setParameter($name, $value);
            }
        } else {
            $queryBuilder->andWhere('1 = 0');
        }
        return $queryBuilder;
    }

    /**
     * Génère l'expression DQL d'un filtre par population donné
     *
     * @param PdhProfilDefHabi $pdh         Le filtre par population
     * @param string           $paramPrefix Le préfixe des paramètres
     *
     * @return array           renvoit l'expression et les paramètres associés
     * @throws \Exception
     */
    protected function createHabilitationExpression(PdhProfilDefHabi $pdh, $paramPrefix = '')
    {
        $tables = array(
            'i' => array(),
            'c' => array(),
        );
        switch ($pdh->getPdhMode()) {
            case EnumLabelModeHabilitationType::MIXED_MODE:
                $tables['i'] = array('ifp', 'iin');
                $tables['c'] = array('ifp');
                break;
            case EnumLabelModeHabilitationType::REFERENCE_MODE:
                $tables['i'] = array( 'iin');
                $tables['c'] = array( 'ifp');
                break;
            case EnumLabelModeHabilitationType::ARCHIVE_MODE:
                $tables['i'] = array( 'ifp');
                $tables['c'] = array( 'ifp');
                break;
            default:
                throw new \Exception(sprintf(
                    'Mode habilitation "%s" inconnu',
                    $pdh->getPdhMode()
                ));
        }

        $habilitations = array(
            'i' => $pdh->getPdhHabilitationI(),
            'c' => $pdh->getPdhHabilitationC(),
        );
        $columnMappings = array(
            'ifp' => $this->getColumnMapping(),
            'iin' => $this->_em->getRepository('ApiBundle:IinIdxIndiv')->getColumnMapping(),
        );
        $xmlParser = new SimpleXmlParser();

        $expression = '';
        $parameters = array();
        foreach ($habilitations as $typeHabilitation => $habilitation) {
            $expressions = array();
            foreach ($tables[$typeHabilitation] as $i => $table) {
                $expressionBuilder = new DoctrineExpressionBuilder();
                $expressionBuilder->setTableAlias($table);
                $expressionBuilder->setColumnMapping($columnMappings[$table]);
                $expressionBuilder->setParameterPrefix($paramPrefix . '_'. $typeHabilitation . '_' . $i . '_');
                $xmlParser->parse($habilitation, $expressionBuilder);
                if ($expressionBuilder->getExpression()) {
                    $expressions[] = $expressionBuilder->getExpression();
                    $parameters += $expressionBuilder->getParameters();
                }
            }

            if ($expressions) {
                if ($expression) {
                    $expression .= ' AND ';
                }
                $expression .= '('.implode(' OR ', $expressions).')';
            }
        }

        return array($expression, $parameters);
    }

    /**
     * Liste WS List Documents
     *
     * @param $params
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function listDocumentWsByParams($params)
    {
        $queryBuilder = $this->createQueryBuilder('d');
        if (isset($params->fields)) {
            $queryBuilder->select($params->fields);
        }
        $queryBuilder = $this->buildDocumentWsByParams($params, $queryBuilder);
        if (isset($params->start)) {
            $queryBuilder->setFirstResult($params->start);
        }
        if (isset($params->limit)) {
            $queryBuilder->setMaxResults($params->limit);
        }

        return
            $queryBuilder
                ->getQuery()
                ->getArrayResult()
            ;
    }

    /**
     * Count WS Documents
     *
     * @param $params
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function countDocumentWsByParams($params)
    {
        $queryBuilder = $this->createQueryBuilder('d')
            ->select('COUNT(d)');
        $this->buildDocumentWsByParams($params, $queryBuilder, true);

        return
            $queryBuilder
                ->getQuery()
                ->getSingleScalarResult()
            ;
    }

    /**
     * Construit le corps de la requête (éventuellement les jointures et les filtres)
     *
     * @param $params
     * @param QueryBuilder $queryBuilder
     *
     * @return QueryBuilder
     */
    private function buildDocumentsBodyQuery($params, QueryBuilder $queryBuilder)
    {
        if (strtoupper($params->node->code) == DocumentController::TYPE_FOLDER) {
            $queryBuilder->join('ApiBundle:FdoFolderDoc', 'fdo', 'WITH', 'fdo.fdoDoc = d');
            $queryBuilder->where('fdo.fdo' . $params->node->code . ' = :folder')
                ->setParameter('folder', $params->node->value);
        } elseif (strtoupper($params->node->code) == DocumentController::TYPE_THE) {
            $queryBuilder->join('ApiBundle:PtyProcessusType', 'pty', 'WITH', 'pty.ptyType = d.ifpCodeDocument');
            $queryBuilder->where('pty.pty' . $params->node->code . ' = :process')
                ->setParameter('process', $params->node->value);
        } elseif (strtoupper($params->node->code) == DocumentController::TYPE_CMP) {
            $queryBuilder
                ->join('ApiBundle:CtyCompletudeType', 'cty', 'WITH', 'cty.ctyType = d.ifpCodeDocument')
                ->join('ApiBundle:IinIdxIndiv', 'iin', 'WITH', 'd.ifpIdNumMatriculeRh = iin.iinIdNumMatriculeRh');
            $queryBuilder->where('cty.cty' . $params->node->code . ' = :completude')
                ->setParameter('completude', $params->node->value);
            if (isset($params->node->population)) {
                $queryBuilder = $this->getEntityManager()
                    ->getRepository('ApiBundle:ComCompletude')
                    ->queryFilterEmployeePopulation(
                        $params->node->population,
                        $queryBuilder
                    );
            }
        } else {
            if (!is_array($params->node->value)) {
                $queryBuilder->where('d.ifp' . $params->node->code . ' = :drawer')
                    ->setParameter('drawer', $params->node->value);
            } else {
                $nbValues = count($params->node->value);
                if (1 === $nbValues) {
                    $queryBuilder->where('d.ifp' . $params->node->code . ' = :drawer')
                        ->setParameter('drawer', $params->node->value[0]);
                } elseif (1 < $nbValues) {
                    $queryBuilder->where(
                        $queryBuilder->expr()->in('d.ifp' . $params->node->code, $params->node->value)
                    );
                }
            }
        }
        return $queryBuilder;
    }

    /**
     * Requête des parametres liste et count
     *
     * @param $params
     * @param QueryBuilder $queryBuilder
     * @param bool $count
     *
     * @return mixed
     */
    public function buildDocumentWsByParams($params, QueryBuilder $queryBuilder, $count = false)
    {
        if (!empty($params->node->code)) {
            $queryBuilder = $this->buildDocumentsBodyQuery($params, $queryBuilder);
        }
        // Traitement des paramètres Fields
        if ($params->node->fields) {
            $queryBuilder = $this->searchInFields($params->node->fields, $queryBuilder, 'd');
        }
        // Règles de sélection des documents selon leurs statut et source
        $this->queryRulesStatusPaper($queryBuilder);

        if (!$count) {
            $this->manySorts($params->sorts, $queryBuilder, 'd');
        }

        return $queryBuilder;
    }

    /**
     * Tri par champs
     *
     * @param $objSorts
     * @param QueryBuilder $queryBuilder
     * @param $table
     */
    public function manySorts($objSorts, QueryBuilder $queryBuilder, $table)
    {
        foreach ($objSorts as $keySorts => $propertySorts) {
            // @TODO: ne faire appel à listFieldsWsDocument qu'une seule fois !!!
            if (array_key_exists($keySorts, $this->listFieldsWsDocument())) {
                $queryBuilder->addOrderBy($table . '.' . $keySorts, $propertySorts->dir);
            }
        }
    }

    /**
     * Liste de champs de la table IfpIndexfichePaperless pour le Ws
     * @return array
     * @throws \Doctrine\ORM\Mapping\MappingException
     */
    public function listFieldsWsDocument()
    {
        $metadata = $this->getClassMetadata();
        $sPrimaryKeyName = $metadata->getSingleIdentifierFieldName();
        $metaForWs = [];

        foreach ($metadata->fieldMappings as $keyField => $valueField) {
            if ($keyField !== $sPrimaryKeyName && $keyField !== $metadata->fieldMappings['ifpCreatedAt']['fieldName']
                && $keyField !== $metadata->fieldMappings['ifpUpdatedAt']['fieldName']
            ) {
                $metaForWs[$keyField] = $valueField;
            }
        }

        return $metaForWs;
    }

    /**
     * Liste des proprietés des champs d'un document
     *
     * @param $metadataDocument
     *
     * @return array
     */
    public function customFieldsAndProperties($metadataDocument)
    {
        $fieldsMappings = $this->getEntityManager()
            ->getClassMetadata(self::BUNDLE_NAME . ':IfpIndexfichePaperless')->fieldMappings;
        // Parcours des champs et ajout des propriétés type, length et nullable si non initialisées
        foreach ($metadataDocument as $keyMetadata => &$valueMetadata) {
            // Champ existe dans la table ?
            if (isset($fieldsMappings[$keyMetadata])) {
                // On complète les attributs manquants
                if (!array_key_exists('type', $valueMetadata)) {
                    $valueMetadata['type'] = $fieldsMappings[$keyMetadata]['type'];
                }
                if (!array_key_exists('length', $valueMetadata)) {
                    $valueMetadata['length'] = $fieldsMappings[$keyMetadata]['length'];
                }
                if (!array_key_exists('nullable', $valueMetadata)) {
                    $valueMetadata['nullable'] = $fieldsMappings[$keyMetadata]['nullable'];
                }
            }
        }

        return [
            self::TABLE => 'IfpIndexfichePaperless',
            'fields' => $metadataDocument
        ];
    }

    /**
     * Retourne un document par rapport à son Id
     * @param $ifpId
     * @param null $fields
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function retrieveDataOneDocumentByIfpId($ifpId, $fields = null)
    {
        $queryBuilder = $this->createQueryBuilder('d');
        if (!is_null($fields)) {
            $queryBuilder->select($fields);
        }
        $queryBuilder
            ->where('d.ifpId = :id')
            ->setParameter('id', $ifpId);

        return $queryBuilder
            ->getQuery()
            ->getOneOrNullResult()
            ;
    }

    /**
     * Liste de documents non gelés du salarié et son entreprise
     * @param array $params
     * @return null
     */
    public function getDocumentUnfreezeByParams($params = [])
    {
        /* @var $queryBuilder object */
        if (count($params) > 0) {
            $queryBuilder = $this->createQueryBuilder("d");
            $queryBuilder = $this->queryRulesFreeze($params, $queryBuilder);

            return $queryBuilder->getQuery()->getArrayResult();
        }

        return null;
    }

    /**
     * Recherche sur les documents actuels ou les documents archivés
     * @param $fieldsForSelect
     * @param $listFieldsSearch
     * @param $table
     * @param object $params
     * @param array $contextFields
     * @return array|null
     */
    public function queryForAutocomplete($fieldsForSelect, $listFieldsSearch, $table, $contextFields, $params = null)
    {
        $columnClient = ($params->client['column'])? $params->client['column'] : null;
        $valueClient = ($params->client['value'])? $params->client['value'] : null;
        $valueMain = ($params->main['value'])? $params->main['value'] : null;
        $paramsFields = ($params->fields)? $params->fields : null;
        $prefix = ($params->prefix)? $params->prefix : null;
        $entityManager = $this->getEntityManager();
        $query = $entityManager->createQueryBuilder();
        $query->select($fieldsForSelect)
            ->from($table, $prefix);
        // Control Paramètre CodeClient
        if (!$columnClient || !$valueClient) {
            return null;
        }
        // Paramètre CodeClient
        $query->where($query->expr()->in($prefix.'.' . $columnClient, $valueClient));
        // Paramètre Code Pattern
        foreach ($contextFields as $keyFields => $fields) {
            if (0===$keyFields) {
                $query->andWhere(
                    $query->expr()->like(
                        $prefix . '.' . $prefix . $fields,
                        $query->expr()->literal('%' . $valueMain . '%')
                    )
                );
            } else {
                $query->orWhere(
                    $query->expr()->like(
                        $prefix . '.' . $prefix . $fields,
                        $query->expr()->literal('%' . $valueMain . '%')
                    )
                );
            }
        }
        // Paramètre fields
        if ($paramsFields && (0 < count($paramsFields))) {
            foreach ($paramsFields as $keyParamsField => $valuesParamsField) {
                // Type Array
                if (is_array($valuesParamsField) && count($valuesParamsField)>0) {
                    $query->andWhere($query->expr()->in($prefix.'.' . $keyParamsField, $valuesParamsField));
                } elseif (is_string($valuesParamsField) && !is_null($valuesParamsField)) {
                    $query->andWhere($prefix.'.' . $keyParamsField . ' = :param_'.$keyParamsField)
                            ->setParameter('param_'.$keyParamsField, $valuesParamsField);
                }
                // Type DateTime
                $strDateParamsField = explode($prefix, $keyParamsField);
                if (array_key_exists($strDateParamsField[1], array_flip($listFieldsSearch->contextDates))) {
                    if (is_object($valuesParamsField)) {
                        /* @var $valuesParamsField object */
                        $objectStartDate = ($valuesParamsField->start)
                            ? new \DateTime(date('Y-m-d H:i:s', $valuesParamsField->start))
                            : false;
                        if ($objectStartDate) {
                            $query->andWhere($prefix.'.'.$prefix.$strDateParamsField[1].' >= :start')
                                ->setParameter('start', $objectStartDate);
                        }

                        $objectEndDate = ($valuesParamsField->end)
                            ? new \DateTime(date('Y-m-d H:i:s', $valuesParamsField->end))
                            : false;
                        if ($objectEndDate) {
                            $query->andWhere($prefix.'.'.$prefix.$strDateParamsField[1].' <= :end')
                                ->setParameter('end', $objectEndDate);
                        }
                    }
                }
            }
        }
        if (isset($params->status) && ('ifp' === $params->prefix)) {
            $query->andWhere($prefix.'.'.$prefix.'StatusNum = :status')
                ->setParameter('status', $params->status);
        }
        $query->groupBy('context');
        $query->orderBy('context', 'ASC');
        if (isset($params->start)) {
            $query->setFirstResult($params->start);
        }
        if (isset($params->limit)) {
            $query->setMaxResults($params->limit);
        }

        return $query
            ->getQuery()
            ->getArrayResult();
    }

    /**
     * @param $documentIds
     * @return mixed
     */
    public function freezeDocuments($documentIds)
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->update('ApiBundle:IfpIndexfichePaperless', 'ifp')
            ->set('ifp.ifpGeler', true);
        $queryIn = $query->expr()->in('ifp.ifpId', $documentIds);
        return $query->andWhere($queryIn)
            ->getQuery()
            ->execute();
    }

    /**
     * Recherches sur paramètre fields
     * @param $fields
     * @param QueryBuilder $queryBuilder
     * @param $table
     * @return mixed
     */
    public function searchInFields($fields, $queryBuilder, $table)
    {
        $listFields = (array)$fields;
        foreach ($listFields as $keysFields => $valuesFields) {
            if (is_array($valuesFields)) {
                $queryBuilder->andWhere($queryBuilder->expr()->in($table.'.' . $keysFields, $valuesFields));
            }
            if (is_object($valuesFields)) {
                if (isset($valuesFields->start) && isset($valuesFields->end)) {
                    $objectStartDate = ($valuesFields->start)
                        ? new \DateTime(date('Y-m-d H:i:s', $valuesFields->start))
                        : false;
                    if ($objectStartDate) {
                        $queryBuilder->andWhere($table.'.'.$keysFields.' >= :start_'.$keysFields)
                            ->setParameter('start_'.$keysFields, $objectStartDate);
                    }
                    $objectEndDate = ($valuesFields->end)
                        ? new \DateTime(date('Y-m-d H:i:s', $valuesFields->end))
                        : false;
                    if ($objectEndDate) {
                        $queryBuilder->andWhere($table.'.'.$keysFields.' >= :end_'.$keysFields)
                            ->setParameter('end_'.$keysFields, $objectEndDate);
                    }
                }
            }
            if (is_bool($valuesFields)) {
                $queryBuilder->andWhere($table.'.' . $keysFields . ' = :param_'.$keysFields)
                    ->setParameter('param_'.$keysFields, $valuesFields);
            }
            if (is_string($valuesFields)) {
                $queryBuilder->andWhere($table.'.' . $keysFields . ' = :param_'.$keysFields)
                    ->setParameter('param_'.$keysFields, $valuesFields);
            }
        }

        return $queryBuilder;
    }

    /**
     * Règles de selection des documents par son statut et sa source
     * @param $queryBuilder
     */
    public function queryRulesStatusPaper($queryBuilder)
    {
        /* @var $queryBuilder QueryBuilder */
        $queryBuilder->andWhere(
            $queryBuilder->expr()->orX(
                'd.ifpStatusNum = :statutOk',
                'd.ifpStatusNum = :statutRejet AND d.ifpIdSourceDocument != :sourceExclue'
            )
        )
            ->setParameter('statutOk', IfpIndexfichePaperless::STATUS_OK_DOCUMENT)
            ->setParameter('statutRejet', IfpIndexfichePaperless::STATUS_REJET_DOCUMENT)
            ->setParameter('sourceExclue', IfpIndexfichePaperless::SOURCE_DOCUMENT_EXCLUDED);
    }

    /**
     * Règles du gel
     *
     * @param $params
     * @param $queryBuilder
     *
     * @return mixed
     */
    public function queryRulesFreeze($params, $queryBuilder)
    {
        /* @var $queryBuilder object */
        $queryBuilder
            ->where("d.ifpIdNumMatriculeRh = :matricule_rh")
            ->setParameter("matricule_rh", $params['ifpIdNumMatriculeRh']);

        $queryBuilder
            ->andWhere("d.ifpCodeClient = :code_client")
            ->setParameter("code_client", $params['ifpCodeClient']);
        $queryBuilder
            ->andWhere("d.ifpGeler = :status_gel")
            ->setParameter("status_gel", $params['ifpGeler']);

        return $queryBuilder;
    }

    /**
     * Recherche de la presence d'un Documents
     * @param $iniContent
     * @param $rowIinIdxIndiv
     * @param $objMetadataProduction
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findDocumentByParams($iniContent, $rowIinIdxIndiv, $objMetadataProduction)
    {
        $queryBuilder = $this->createQueryBuilder('d');

        if (isset($iniContent->IdNumMatriculeRh)) {
            $queryBuilder
                ->where('d.ifpIdNumMatriculeRh = :matricule_rh')
                ->setParameter('matricule_rh', $iniContent->IdNumMatriculeRh);
        }
        if(isset($iniContent->idCategory)) {
            $queryBuilder
                ->andWhere('d.ifpIdIndiceClassement = :classement')
                ->setParameter('classement', $iniContent->idCategory);
        }
        if(isset($iniContent->IdPeriodePaie)) {
            $queryBuilder
                ->andWhere('d.ifpIdPeriodePaie = :periode_paie')
                ->setParameter('periode_paie', $iniContent->IdPeriodePaie);
        }
        if(isset($objMetadataProduction['ifp_id_poids_document'])) {
            $queryBuilder
                ->andWhere('d.ifpIdPoidsDocument = :poid')
                ->setParameter('poid', $objMetadataProduction['ifp_id_poids_document']);
        }
        if(isset($objMetadataProduction['ifp_vdm_localisation'])) {
            $queryBuilder
                ->andWhere('d.ifpVdmLocalisation = :localisation')
                ->setParameter('localisation', $objMetadataProduction['ifp_vdm_localisation']);
        }
        if(isset($objMetadataProduction['ifp_archive_name'])) {
            $queryBuilder
                ->andWhere('d.ifpArchiveName = :archive_name')
                ->setParameter('archive_name', $objMetadataProduction['ifp_archive_name']);
        }
        if(isset($objMetadataProduction['ifp_documentsassocies'])) {
            $queryBuilder
                ->andWhere('d.ifpDocumentsassocies = :doc_associes')
                ->setParameter('doc_associes', $objMetadataProduction['ifp_documentsassocies']);
        }

        return $queryBuilder
            ->getQuery()
            ->getOneOrNullResult()
            ;
    }

    /**
     * Récupère la liste des flux CEL
     *
     * @param array $datas
     *
     * @return array
     */
    public function findCelList(array $datas)
    {
        $queryBuilder = $this->createQueryBuilder('ifp');
        $queryBuilder->where($queryBuilder->expr()->in('ifp.ifpIdSourceDocument', $datas['source']))
            ->andWhere("ifp.ifpIdPeriodePaie != ''");

        if (!empty($datas['codePac'])) {
            $queryBuilder->andWhere($queryBuilder->expr()->in('ifp.ifpCodeClient', $datas['codePac']));
        }
        if (!empty($datas['codeSourceOrigine'])) {
            $queryBuilder->andWhere($queryBuilder->expr()->in('ifp.ifpIdAlphanum1', $datas['codeSourceOrigine']));
        }
        if (!empty($datas['dateArchivage']['start'])) {
            $date = new \DateTime($datas['dateArchivage']['start']);
            $queryBuilder->andWhere('ifp.ifpIdDateArchivageDocument >= :start_date')
                ->setParameter('start_date', $date->format('Y-m-d H:i:s'));
        }
        if (!empty($datas['dateArchivage']['end'])) {
            $date = new \DateTime($datas['dateArchivage']['end']);
            $queryBuilder->andWhere('ifp.ifpIdDateArchivageDocument <= :end_date')
                ->setParameter('end_date', $date->format('Y-m-d H:i:s'));
        }
        if (!empty($datas['periodeArchivage']['start'])) {
            $period = new \DateTime($datas['periodeArchivage']['start']);
            $queryBuilder->andWhere('ifp.ifpIdPeriodePaie >= :start_period')
                ->setParameter('start_period', $period->format('Ym'));
        }
        if (!empty($datas['periodeArchivage']['end'])) {
            $period = new \DateTime($datas['periodeArchivage']['end']);
            $queryBuilder->andWhere('ifp.ifpIdPeriodePaie <= :end_period')
                ->setParameter('end_period', $period->format('Ym'));
        }

        if ('periode' == $datas['typeRapport']) {
            $queryBuilder->select([
                'ifp.ifpIdPeriodePaie',
                'ifp.ifpNumdtr',
            ]);
            $queryBuilder->orderBy('ifp.ifpIdPeriodePaie', 'desc')
                ->addOrderBy('ifp.ifpNumdtr', 'asc');
        } else {
            $queryBuilder->select([
                'ifp.ifpIdLibelleDocument',
                'ifp.ifpIdPeriodePaie',
                'ifp.ifpIdDateArchivageDocument',
                'ifp.ifpNumdtr',
                'ifp.ifpIdAlphanum1',
                'ifp.ifpModedt'
            ]);
            $queryBuilder->orderBy('ifp.ifpIdLibelleDocument', 'asc');
        }
        return $queryBuilder->getQuery()->getArrayResult();
    }

    /**
     * Récupère une liste de valeurs pour une colonne de IfpIndexfichePaperless
     *
     * @param array $params
     *
     * @return array
     */
    public function findFieldSearch(array $params)
    {
        if (!isset($this->getClassMetadata()->fieldMappings[$params['field']])) {
            return [];
        }
        $field = 'ifp.' . $params['field'];
        $queryBuilder = $this->createQueryBuilder('ifp')
            ->select($field)
            ->where($field . " <> ''");

        if ($params['distinct']) {
            $queryBuilder->distinct();
        }
        return $queryBuilder->getQuery()->getArrayResult();
    }
}
